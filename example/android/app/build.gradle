def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: 'com.google.firebase.crashlytics'

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion 30

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId "com.ziggeo.flutter.demo"
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 5
        versionName "1.0.4"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        setProperty("archivesBaseName", "androidFlutter-v" + versionName + "_" + getDate())
        missingDimensionStrategy "dim", "flutter" // for internal development
    }
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }
    buildTypes {
        debug {
            manifestPlaceholders = [crashlyticsCollectionEnabled:"false"]
            signingConfig signingConfigs.debug
        }
        release {
            manifestPlaceholders = [crashlyticsCollectionEnabled:"true"]
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "androidx.appcompat:appcompat:1.3.1"
    //Firebase
    implementation 'com.google.firebase:firebase-analytics-ktx:19.0.2'
    implementation 'com.google.firebase:firebase-crashlytics-ktx:18.2.3'
    //JUnit
    testImplementation "junit:junit:4.13.1"
    //Mockito
    testImplementation "org.mockito:mockito-core:3.0.0"
    //Mockito Kotlin
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
    //Kakao
    androidTestImplementation "com.agoda.kakao:kakao:2.3.0"
    androidTestImplementation "androidx.annotation:annotation:1.1.0"
    def rulesAndRunner = "1.3.0"
    androidTestImplementation "androidx.test:runner:$rulesAndRunner"
    androidTestImplementation "androidx.test:rules:$rulesAndRunner"
    //Espresso
    def espresso = "3.3.0"
    androidTestImplementation 'androidx.test:core:1.3.0'
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espresso"
    implementation "androidx.core:core-ktx:1.6.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
repositories {
    mavenCentral()
}
static def getDate() {
    return new Date().format('HH.mm.ss_dd-MM-YYYY')
}
//apply plugin: 'com.google.gms.google-services'
//uncomment for release
